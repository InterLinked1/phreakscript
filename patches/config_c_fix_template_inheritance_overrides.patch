From 177d8754ddc10737c0a679b1cfd4819b210ace52 Mon Sep 17 00:00:00 2001
From: Naveen Albert <asterisk@phreaknet.org>
Date: Wed, 21 Dec 2022 21:27:15 +0000
Subject: [PATCH] config.c: Make ast_variable_retrieve return last match.

ast_variable_retrieve currently returns the first match
for a variable, as opposed to the last one. This is problematic
because modules that load config settings by explicitly
calling ast_variable_retrieve on a variable name (as opposed
to iterating through all the directives as specified) will
end up taking the first specified value, such as the default
value from the template rather than the actual effective value
in an individual config section, leading to the wrong config.

This fixes this by making ast_variable_retrieve return the last
match, or the most recently overridden one, as the effective setting.
This is similar to what the -1 index in the AST_CONFIG function does.

There is another function, ast_variable_find_last_in_list, that does
something similar. However, it's a slightly different API, and it
sees virtually no usage in Asterisk. ast_variable_retrieve is what
most things use so this is currently the relevant point of breakage.

ASTERISK-30370 #close

Change-Id: Ia681407275a557c1462f93832a4d45f31c580354
---

diff --git a/main/config.c b/main/config.c
index 1074407..b7ecd81 100644
--- a/main/config.c
+++ b/main/config.c
@@ -783,11 +783,19 @@
 const char *ast_variable_retrieve(struct ast_config *config, const char *category, const char *variable)
 {
 	struct ast_variable *v;
+	const char *match = NULL;
+
+	/* We can't return as soon as we find a match, because if a config section overrides
+	 * something specified in a template, then the actual effective value is the last
+	 * one encountered, not the first one.
+	 * (This is like using the -1 index for the AST_CONFIG function.)
+	 * Also see ast_variable_find_last_in_list
+	 */
 
 	if (category) {
 		for (v = ast_variable_browse(config, category); v; v = v->next) {
 			if (!strcasecmp(variable, v->name)) {
-				return v->value;
+				match = v->value;
 			}
 		}
 	} else {
@@ -796,13 +804,13 @@
 		for (cat = config->root; cat; cat = cat->next) {
 			for (v = cat->root; v; v = v->next) {
 				if (!strcasecmp(variable, v->name)) {
-					return v->value;
+					match = v->value;
 				}
 			}
 		}
 	}
 
-	return NULL;
+	return match;
 }
 
 const char *ast_variable_retrieve_filtered(struct ast_config *config,
